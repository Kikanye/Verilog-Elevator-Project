module elevator_control (request_floor, over_time, reset, clk, complete, 
							direction, floor_to_go, out_current_floor); 
input [2:0]request_floor;
input over_time;
//output [2:0] in_current_floor;

input clk;
input reset;

output reg [27:0] direction; 
output reg complete;
output reg [6:0] out_current_floor;

output reg [6:0] floor_to_go ;

reg [2:0]current_floor;
reg [12:0]clk_count;
reg clk_200;
reg clk_trigger;

//current_floor=3'b0;

always @ (posedge reset)
	begin
		clk_200=1'b0;
		clk_count = 0;
		clk_trigger=1'b0;
		//complete = 1'b0;
	end

always @ (posedge clk)
	begin
		if (clk_trigger)
		 begin
			clk_count=clk_count+1;
		 end
		 
		 if (clk_count==500000)
		  begin
			  clk_200=~clk_200;
			  clk_count=0;
		  end
	end 
	
	
always @ (request_floor)
	begin
		clk_trigger=1;
		clk_200=~clk_200;
		//current_floor<=in_current_floor;
	end
		  
always @ (negedge reset)
	begin
		case (request_floor)
			//
			3'b000:floor_to_go=7'b1001111;//1
			3'b001:floor_to_go=7'b0010010;//2
			3'b010:floor_to_go=7'b0000110;//3
			3'b011:floor_to_go=7'b1001100;//4
		endcase
		
		case (current_floor)
			3'b000:out_current_floor=7'b1001111;//1
			3'b001:out_current_floor=7'b0010010;//2
			3'b010:out_current_floor=7'b0000110;//3
			3'b011:out_current_floor=7'b1001100;//4
		endcase	
	end

always @(posedge clk)
	 begin
		 //if(!complete)
			//begin
			 if (request_floor>current_floor)
				 begin
				  direction=28'b1000001001100011111111111111;
				  current_floor <= current_floor+3'b1;
				 end
		 
			 else if(request_floor<current_floor)
				begin
				  direction=28'b0001001000000110000010011000;
				  current_floor <= current_floor-3'b1;
				end
			 
			 else if(request_floor == current_floor)
				 begin
				  complete=1'b1;
				  direction=28'b0001001000000111111111111111;
				 end
			 //end
		end	
endmodule